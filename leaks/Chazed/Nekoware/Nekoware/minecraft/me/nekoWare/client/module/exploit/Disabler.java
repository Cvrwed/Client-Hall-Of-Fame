package me.nekoWare.client.module.exploit;

import me.hippo.api.lwjeb.annotation.Handler;
import me.nekoWare.client.event.events.PacketInEvent;
import me.nekoWare.client.event.events.PacketOutEvent;
import me.nekoWare.client.event.events.UpdateEvent;
import me.nekoWare.client.module.Module;
import me.nekoWare.client.util.ChatUtil;
import me.nekoWare.client.util.misc.Timer;
import me.nekoWare.client.util.packet.PacketUtil;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S2APacketParticles;
import org.apache.commons.lang3.RandomUtils;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;

public class Disabler extends Module {

    private static final int VERUS_DISABLE_AUTOBAN_CHANNEL = 65536;
    private static final short VERUS_DISABLE_AUTOBAN_UID = 32767;
    private final Queue<Packet> packetQueue = new ConcurrentLinkedQueue();
    private final Timer timer = new Timer();
    private final Timer timer1 = new Timer();

    public Disabler(final String name, final int key, final Module.Category category) {
        super(name, key, category);
        this.addModes("Ghostly", "Verus");
    }
    
    int nigerian;
    int y;

    @Override
    public void onDisable() {
        packetQueue.clear();
    }

    @Override
    public void onEnable() {
        timer.reset();
    }

    @Handler
    public Consumer<PacketInEvent> packetInEventConsumer = (event) -> {

        if(isMode("Ghostly") && y > 10) {
        		mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
        		y = 0;
        }
    	
    };

    @Handler
    public Consumer<UpdateEvent> eventConsumer = (event) -> {

        if (isMode("Verus")) {
            if (timer.delay(490L)) {
                if (!packetQueue.isEmpty()) {
                    PacketUtil.sendPacketSilent(packetQueue.poll());
                }
                timer.reset();
            }
            
        }

    };

    @Handler
    public Consumer<PacketOutEvent> eventConsumer1 = (event) -> {
        if (isMode("Ghostly")) {
        	y++;
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                event.cancel();

                timer.reset();
            }
            


            
            
            if(nigerian >= 2) {
                packetQueue.clear();
            }
            

            
            if(nigerian >= 8) {
            	nigerian = 0;
            }
            
            nigerian++;
        }
    };
}
