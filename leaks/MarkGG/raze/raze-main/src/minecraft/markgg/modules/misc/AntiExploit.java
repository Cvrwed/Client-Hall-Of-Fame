package markgg.modules.misc;

import markgg.Client;
import markgg.events.Event;
import markgg.events.listeners.EventPacket;
import markgg.events.listeners.EventUpdate;
import markgg.modules.Module;
import markgg.settings.BooleanSetting;
import markgg.settings.NumberSetting;
import markgg.ui.notifs.Notification;
import markgg.ui.notifs.NotificationManager;
import markgg.ui.notifs.NotificationType;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S0EPacketSpawnObject;
import net.minecraft.network.play.server.S0FPacketSpawnMob;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.network.play.server.S2APacketParticles;
import net.minecraft.network.play.server.S2BPacketChangeGameState;

public class AntiExploit extends Module{

	private boolean guardianEffect = false;
	private int arrowMax = 0;
	private int tick = 0;
	public BooleanSetting guardianValue = new BooleanSetting("Less Guardian", this, true);
	public NumberSetting maxArrowSpawn = new NumberSetting("Max Arrows", this, 100, 50, 1000, 50);

	public AntiExploit() {
		super("AntiExploit", "desc", 0, Category.MISC);
	}

	public void onEvent(Event e) {
		if (e instanceof EventPacket) {
			if(e.isIncoming()) {
				Packet packet = EventPacket.getPacket();
				S08PacketPlayerPosLook S08Packet = (S08PacketPlayerPosLook)EventPacket.getPacket();
				S2APacketParticles S2APacket = (S2APacketParticles)EventPacket.getPacket();
				S27PacketExplosion S27Packet = (S27PacketExplosion)EventPacket.getPacket();
				S2BPacketChangeGameState S2BPacket = (S2BPacketChangeGameState)EventPacket.getPacket();
				S0EPacketSpawnObject S0EPacket = (S0EPacketSpawnObject)EventPacket.getPacket();
				if(mc.thePlayer != null && mc.theWorld != null && packet instanceof S0FPacketSpawnMob && mc.theWorld.loadedEntityList.size() > 500) {
					e.setCancelled(true);
				}
				if(packet instanceof S08PacketPlayerPosLook) {
					if (Math.abs(S08Packet.field_148940_a) > 3.0E7 || Math.abs(S08Packet.field_148938_b) > 3.0E7 || Math.abs(S08Packet.field_148939_c) > 3.0E7) {
						
						e.setCancelled(true);
					}
				}
				if(packet instanceof S2APacketParticles) {
					if(S2APacket.func_149222_k() > 2024) {
						e.setCancelled(true);
					}
				}
				if(packet instanceof S27PacketExplosion) {
					if (Math.abs(S27Packet.func_149149_c()) > 100.0 || Math.abs(S27Packet.func_149144_d()) > 100.0 || Math.abs(S27Packet.func_149147_e()) > 100.0) {
						e.setCancelled(true);
					}
				}
				if (packet instanceof S2BPacketChangeGameState) {
					if(S2BPacket.field_149141_c == 5) {
						if(!mc.isDemo()) {
							e.setCancelled(true);
						}
					}else if(S2BPacket.field_149141_c == 10) {
						if(guardianValue.isEnabled()) {
							if(!guardianEffect)
								guardianEffect = true;
							else
								e.setCancelled(true);
						}
					}
					if(packet instanceof S0EPacketSpawnObject && S0EPacket.field_149019_j == 60) {
						if (arrowMax++ > maxArrowSpawn.getValue()) {
							e.setCancelled(true);
						}
					}
				}
			}
			if(e instanceof EventUpdate) {
				if (tick++ >= 20) {
					tick = 0;
					arrowMax = 0;
					guardianEffect = false;
				}
			}
		}
	}
	
	public void onEnable() {
		NotificationManager.show(new Notification(NotificationType.ENABLE, getName() + " was enabled!", 1));
		Client.addChatMessage("This module may not work currently!");
	}

}
