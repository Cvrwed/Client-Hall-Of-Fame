package me.jinthium.straight.impl.modules.exploit;

import best.azura.irc.utils.Wrapper;

import io.mxngo.echo.Callback;
import io.mxngo.echo.EventCallback;
import me.jinthium.straight.api.module.Module;
import me.jinthium.straight.api.notification.NotificationType;
import me.jinthium.straight.api.setting.ParentAttribute;
import me.jinthium.straight.impl.Client;
import me.jinthium.straight.impl.components.BadPacketsComponent;
import me.jinthium.straight.impl.components.BlinkComponent;
import me.jinthium.straight.impl.components.PingSpoofComponent;
import me.jinthium.straight.impl.event.game.TeleportEvent;
import me.jinthium.straight.impl.event.movement.PlayerUpdateEvent;
import me.jinthium.straight.impl.event.movement.WorldEvent;
import me.jinthium.straight.impl.event.network.PacketEvent;
import me.jinthium.straight.impl.modules.exploit.disabler.BlocksMCDisabler;
import me.jinthium.straight.impl.modules.exploit.disabler.NoRulesDisabler;
import me.jinthium.straight.impl.modules.exploit.disabler.VulcanDisabler;
import me.jinthium.straight.impl.modules.exploit.disabler.WatchdogDisabler;
import me.jinthium.straight.impl.modules.movement.Flight;
import me.jinthium.straight.impl.modules.movement.Speed;
import me.jinthium.straight.impl.settings.BooleanSetting;
import me.jinthium.straight.impl.settings.ModeSetting;
import me.jinthium.straight.impl.settings.MultiBoolSetting;
import me.jinthium.straight.impl.settings.NumberSetting;
import me.jinthium.straight.impl.settings.mode.ModuleMode;
import me.jinthium.straight.impl.utils.misc.TimerUtil;
import me.jinthium.straight.impl.utils.network.PacketUtil;
import me.jinthium.straight.impl.utils.player.MovementUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.EnumFacing;
import org.lwjglx.input.Keyboard;

import java.util.Objects;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Disabler extends Module {
    private final BooleanSetting showCustom = new BooleanSetting("Show Custom Addons", false);
    private final MultiBoolSetting addons = new MultiBoolSetting("Custom Addons",
            new BooleanSetting("C03 PosEdit", false),
            new BooleanSetting("Verus Combat (C0F, C00, and C0B)", false),
            new BooleanSetting("Blink (Pulse)", false),
            new BooleanSetting("Custom C03 Y+value", false),
            new BooleanSetting("Custom C0F Params", false),
            new BooleanSetting("Balance", false));

    private final NumberSetting pulseInterval = new NumberSetting("Pulse Interval", 150, 0, 1500, 1),
            customC03yVal = new NumberSetting("Y-val", 0, -20, 20, 0.00001),
            c0fWindowID = new NumberSetting("WindowID", 0, -32767, 32767, 1),
            c0fUid = new NumberSetting("Uid", 0, -32767, 32767, 1),
            verusDelay = new NumberSetting("Verus Delay", 150, 0, 10000, 1);

    private final BooleanSetting c0fAccepted = new BooleanSetting("Accepted", true);

    private final ConcurrentLinkedQueue<Packet<?>> packetQueue = new ConcurrentLinkedQueue<>();
    private final TimerUtil timerUtil = new TimerUtil(), blinkTimer = new TimerUtil();

    public Disabler() {
        super("Disabler", 0, Category.EXPLOIT);
        addons.addParent(showCustom, ParentAttribute.BOOLEAN_CONDITION);
        verusDelay.addParent(addons, r -> addons.isEnabled("Verus Combat (C0F, C00, and C0B)"));
        pulseInterval.addParent(addons, r -> addons.isEnabled("Blink (Pulse)"));
        customC03yVal.addParent(addons, r -> addons.isEnabled("Custom C03 Y+value"));
        c0fWindowID.addParent(addons, r -> addons.isEnabled("Custom C0F Params"));
        c0fUid.addParent(addons, r -> addons.isEnabled("Custom C0F Params"));
        c0fAccepted.addParent(addons, r -> addons.isEnabled("Custom C0F Params"));

        this.registerModes(
                new NoRulesDisabler(),
                new VulcanDisabler(),
                new WatchdogDisabler(),
                new BlocksMCDisabler()
        );

        addSettings(showCustom, addons, verusDelay, pulseInterval, customC03yVal, c0fWindowID, c0fUid, c0fAccepted);
    }

    @Override
    public void onDisable() {
        blinkTimer.reset();
        mc.timer.timerSpeed = 1.0f;
        BlinkComponent.blinking = false;
        packetQueue.clear();
        super.onDisable();
    }

    @Override
    public void onEnable() {
        packetQueue.clear();
        blinkTimer.reset();
        super.onEnable();
    }

    @Callback
    final EventCallback<WorldEvent> worldEventEventCallback = event -> {
        packetQueue.clear();
        blinkTimer.reset();
        BlinkComponent.blinking = false;
        timerUtil.reset();
    };

    @Callback
    final EventCallback<PacketEvent> packetEventCallback = event ->  {
        if (event.getPacketState() == PacketEvent.PacketState.SENDING) {
            if (showCustom.isEnabled()) {
                addons.getBoolSettings().forEach(setting -> {
                    if (!setting.getName().equalsIgnoreCase("Blink (Pulse)") && BlinkComponent.blinking)
                        BlinkComponent.blinking = false;
                    if (setting.isEnabled()) {
                        switch (setting.getName()) {
                            case "C03 PosEdit" -> {
                                if (event.getPacket() instanceof C03PacketPlayer c03)
                                    c03.setY(c03.getPositionY() + MovementUtil.LILYPAD_VALUE);
                            }
                            case "Balance" -> {
                                if(event.getPacket() instanceof C03PacketPlayer c03)
                                    if(!c03.isRotating() && !c03.isMoving())
                                        event.cancel();
                            }
                            case "Verus Combat (C0F, C00, and C0B)" -> {
                                if (event.getPacket() instanceof C03PacketPlayer) {
                                    if (timerUtil.hasTimeElapsed(verusDelay.getValue().longValue(), true))
                                        while (!packetQueue.isEmpty())
                                            PacketUtil.sendPacketNoEvent(packetQueue.poll());
                                }

                                if (event.getPacket() instanceof C0BPacketEntityAction)
                                    event.cancel();

                                if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
                                    event.cancel();
                                    packetQueue.add(event.getPacket());
                                }
                            }
                            case "Custom C03 Y+value" -> {
                                if (event.getPacket() instanceof C03PacketPlayer c03)
                                    c03.setY(c03.getPositionY() + customC03yVal.getValue().floatValue());
                            }
                            case "Custom C0F Params" -> {
                                if (event.getPacket() instanceof C0FPacketConfirmTransaction)
                                    event.setPacket(new C0FPacketConfirmTransaction(c0fWindowID.getValue().intValue(), c0fUid.getValue().shortValue(), c0fAccepted.isEnabled()));
                            }
                        }
                    }
                });
            }
        }
    };

    @Callback
    final EventCallback<PlayerUpdateEvent> playerUpdateEventCallback = event ->  {
        setSuffix(this.getCurrentMode().getInformationSuffix());

        if (event.isPre() && addons.isEnabled("Blink (Pulse)") && showCustom.isEnabled()) {
            BlinkComponent.blinking = true;
            if (blinkTimer.hasTimeElapsed(pulseInterval.getValue().longValue(), true))
                BlinkComponent.dispatch();
        }
    };
}
