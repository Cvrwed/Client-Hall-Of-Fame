package me.jinthium.straight.impl.modules.exploit;


import io.mxngo.echo.Callback;
import io.mxngo.echo.EventCallback;
import io.netty.buffer.Unpooled;
import me.jinthium.straight.api.module.Module;
import me.jinthium.straight.impl.event.network.PacketEvent;
import me.jinthium.straight.impl.settings.ModeSetting;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C17PacketCustomPayload;

public class Spoofer extends Module {

    private final ModeSetting modeSetting = new ModeSetting("Mode", "LunarClient",
            "LunarClient", "Forge", "PvP Lounge", "Cheatbreaker", "Geyser", "LabyMod");

    public Spoofer(){
        super("Spoofer", Category.EXPLOIT);
        this.addSettings(modeSetting);
    }

    @Callback
    final EventCallback<PacketEvent> packetEventCallback = event -> {
        if(event.getPacketState() == PacketEvent.PacketState.SENDING){
            this.setSuffix(modeSetting.getMode());
            if(event.getPacket() instanceof C17PacketCustomPayload c17){
                switch (modeSetting.getMode()) {
                    case "Forge" -> c17.setData(createPacketBuffer("FML", true));
                    case "LunarClient" -> {
                        c17.setChannel("REGISTER");
                        c17.setData(createPacketBuffer("Lunar-Client", false));
                    }
                    case "LabyMod" -> c17.setData(createPacketBuffer("LMC", true));
                    case "PvP Lounge" -> c17.setData(createPacketBuffer("PLC18", false));
                    case "CheatBreaker" -> c17.setData(createPacketBuffer("CB", true));
                    case "Geyser" -> // It's meant to be "eyser" don't change it
                            c17.setData(createPacketBuffer("eyser", false));
                }
            }
        }
    };

    private PacketBuffer createPacketBuffer(final String data, final boolean string) {
        if (string) {
            return new PacketBuffer(Unpooled.buffer()).writeString(data);
        } else {
            return new PacketBuffer(Unpooled.wrappedBuffer(data.getBytes()));
        }
    }
}
