package me.jinthium.straight.impl.modules.exploit.disabler;


import io.mxngo.echo.Callback;
import io.mxngo.echo.EventCallback;
import me.jinthium.straight.api.event.Event;
import me.jinthium.straight.impl.event.movement.WorldEvent;
import me.jinthium.straight.impl.event.network.PacketEvent;
import me.jinthium.straight.impl.modules.exploit.Disabler;
import me.jinthium.straight.impl.settings.BooleanSetting;
import me.jinthium.straight.impl.settings.mode.ModeInfo;
import me.jinthium.straight.impl.settings.mode.ModuleMode;
import me.jinthium.straight.impl.utils.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S01PacketJoinGame;

import java.util.concurrent.ConcurrentLinkedQueue;

@ModeInfo(name = "Watchdog", parent = Disabler.class)
public class WatchdogDisabler extends ModuleMode<Disabler> {

    private final ConcurrentLinkedQueue<Packet<?>> packetQueue = new ConcurrentLinkedQueue<>();
    private final BooleanSetting pingSpoof = new BooleanSetting("C0F Delay", true);

    public WatchdogDisabler(){
        this.registerSettings(pingSpoof);
    }

    @Callback
    final EventCallback<PacketEvent> packetEventCallback = event -> {
        if(event.getPacket() instanceof S01PacketJoinGame || mc.thePlayer == null) {
            packetQueue.clear();
            return;
        }

        if(event.getPacketState() == PacketEvent.PacketState.SENDING) {
            if (event.getPacket() instanceof C0BPacketEntityAction c0b)
                if (c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || c0b.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING)
                    event.cancel();

            if(pingSpoof.isEnabled()) {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.cancel();
                    packetQueue.add(event.getPacket());
                }

                if (event.getPacket() instanceof C03PacketPlayer && packetQueue.size() > 2) {
                    while (packetQueue.size() > 0)
                        PacketUtil.sendPacketNoEvent(packetQueue.poll());
                }
            }
        }
    };

    @Callback
    final EventCallback<WorldEvent> worldEventEventCallback = event -> {
        packetQueue.clear();
    };
}
