package me.jinthium.straight.impl.modules.exploit.disabler;


import best.azura.irc.utils.Wrapper;
import io.mxngo.echo.Callback;
import io.mxngo.echo.EventCallback;
import me.jinthium.straight.api.module.Module;
import me.jinthium.straight.api.notification.NotificationType;
import me.jinthium.straight.impl.Client;
import me.jinthium.straight.impl.event.game.TeleportEvent;
import me.jinthium.straight.impl.event.movement.PlayerUpdateEvent;
import me.jinthium.straight.impl.event.network.PacketEvent;
import me.jinthium.straight.impl.modules.combat.Velocity;
import me.jinthium.straight.impl.modules.exploit.Disabler;
import me.jinthium.straight.impl.modules.movement.Speed;
import me.jinthium.straight.impl.settings.mode.ModeInfo;
import me.jinthium.straight.impl.settings.mode.ModuleMode;
import me.jinthium.straight.impl.utils.network.PacketUtil;
import me.jinthium.straight.impl.utils.player.MovementUtil;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import org.lwjglx.input.Keyboard;

@ModeInfo(name = "NoRulesHvH", parent = Disabler.class)
public class NoRulesDisabler extends ModuleMode<Disabler> {

    private boolean disabled, cooldown;


    @Override
    public void onEnable() {
        disabled = false;
        cooldown = false;
        super.onEnable();
    }

    @Callback
    final EventCallback<PacketEvent> packetEventCallback = event ->  {
        if (event.getPacketState() == PacketEvent.PacketState.SENDING)
            if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)
                event.cancel();
    };

    @Callback
    final EventCallback<TeleportEvent> teleportEventEventCallback = event -> {
        if (disabled) {
            Client.INSTANCE.getNotificationManager().post("Anticheat Disabled", "You will have to reuse this if you flag at all", NotificationType.WARNING);
            event.cancel();
            disabled = false;
            cooldown = false;
        }
    };

    @Callback
    final EventCallback<PlayerUpdateEvent> playerUpdateEventCallback = event -> {
//        Wrapper.sendMessage("eeeee");
        if (event.isPre()) {
            if (!disabled && event.isPre() && !Client.INSTANCE.getModuleManager().getModule(Speed.class).isEnabled())
                mc.timer.timerSpeed = 1.0f;

            if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) && mc.gameSettings.keyBindUseItem.pressed) {
                if (mc.thePlayer.onGround && !cooldown) {
                    PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                    PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 0.1F, mc.thePlayer.posZ, true));
                    PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false));
                    mc.timer.timerSpeed = 0.2f;
                    MovementUtil.strafe(1f);
                    disabled = true;
                    cooldown = true;
                }
            }
        }
    };
}
