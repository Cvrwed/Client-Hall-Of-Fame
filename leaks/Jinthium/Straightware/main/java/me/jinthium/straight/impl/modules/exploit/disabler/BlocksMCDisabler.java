package me.jinthium.straight.impl.modules.exploit.disabler;

import io.mxngo.echo.Callback;
import io.mxngo.echo.EventCallback;
import me.jinthium.straight.api.notification.Notification;
import me.jinthium.straight.api.notification.NotificationType;
import me.jinthium.straight.impl.Client;
import me.jinthium.straight.impl.event.movement.WorldEvent;
import me.jinthium.straight.impl.event.network.PacketEvent;
import me.jinthium.straight.impl.modules.exploit.Disabler;
import me.jinthium.straight.impl.modules.movement.Flight;
import me.jinthium.straight.impl.settings.mode.ModeInfo;
import me.jinthium.straight.impl.settings.mode.ModuleMode;
import me.jinthium.straight.impl.utils.ChatUtil;
import me.jinthium.straight.impl.utils.Multithreading;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.*;
import org.checkerframework.checker.units.qual.C;

@ModeInfo(name = "BlocksMC", parent = Disabler.class)
public class BlocksMCDisabler extends ModuleMode<Disabler> {

    private String obStaffs = "-";
    private boolean detected;
    private int totalCount;

    public BlocksMCDisabler(){
        Multithreading.runAsync(() -> {
            totalCount = (int) obStaffs.chars().filter(Character::isWhitespace).count();
            System.out.println("[Staff/fallback] " + obStaffs);
        });
    }

    @Override
    public void onEnable() {
        detected = false;
        super.onEnable();
    }

    @Callback
    final EventCallback<WorldEvent> worldEventEventCallback = event -> {
        detected = false;
    };

    @Callback
    final EventCallback<PacketEvent> packetEventEventCallback = event -> {
        switch (event.getPacketState()){
            case SENDING -> {
                if(event.getPacket() instanceof C0FPacketConfirmTransaction c00 && mc.thePlayer.ticksExisted < 40)
                    c00.uid = Short.MIN_VALUE;
            }
            case RECEIVING -> {
                if (event.getPacket() instanceof S1DPacketEntityEffect effectPacket) {
                    Entity entity = mc.theWorld.getEntityByID(effectPacket.getEntityId());
                    detect(entity);
                } else if (event.getPacket() instanceof S18PacketEntityTeleport teleportPacket) {
                    Entity entity = mc.theWorld.getEntityByID(teleportPacket.getEntityId());
                    detect(entity);
                } else if (event.getPacket() instanceof S20PacketEntityProperties propertiesPacket) {
                    Entity entity = mc.theWorld.getEntityByID(propertiesPacket.getEntityId());
                    detect(entity);
                } else if (event.getPacket() instanceof S0BPacketAnimation animationPacket) {
                    Entity entity = mc.theWorld.getEntityByID(animationPacket.getEntityID());
                    detect(entity);
                } else if (event.getPacket() instanceof S14PacketEntity entityPacket) {
                    Entity entity = entityPacket.getEntity(mc.theWorld);
                    detect(entity);
                } else if (event.getPacket() instanceof S19PacketEntityStatus statusPacket) {
                    Entity entity = statusPacket.getEntity(mc.theWorld);
                    detect(entity);
                } else if (event.getPacket() instanceof S19PacketEntityHeadLook headLookPacket) {
                    Entity entity = headLookPacket.getEntity(mc.theWorld);
                    detect(entity);
                } else if (event.getPacket() instanceof S49PacketUpdateEntityNBT updateNBT) {
                    Entity entity = updateNBT.getEntity(mc.theWorld);
                    detect(entity);
                }
            }
        }
    };
    
    public void detect(Entity entity) {
        if (entity != null && (obStaffs.contains(entity.getName()) || obStaffs.contains(entity.getDisplayName().getUnformattedText()))) {
            if (!detected) {
                Client.INSTANCE.getNotificationManager().post(new Notification("Staff Detector", "Staff Detected", NotificationType.WARNING));
                mc.thePlayer.sendChatMessage("/leave");
                detected = true;
            }
        }
    }
}
