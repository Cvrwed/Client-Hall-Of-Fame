/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  io.netty.buffer.Unpooled
 */
package wtf.monsoon.impl.module.exploit;

import io.github.nevalackin.homoBus.Listener;
import io.github.nevalackin.homoBus.annotations.EventLink;
import io.netty.buffer.Unpooled;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.Consumer;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.potion.Potion;
import net.minecraft.util.BlockPos;
import wtf.monsoon.Wrapper;
import wtf.monsoon.api.module.Category;
import wtf.monsoon.api.module.Module;
import wtf.monsoon.api.setting.Setting;
import wtf.monsoon.api.util.entity.PlayerUtil;
import wtf.monsoon.api.util.misc.PacketSleepThread;
import wtf.monsoon.api.util.misc.PacketUtil;
import wtf.monsoon.api.util.misc.StringUtil;
import wtf.monsoon.api.util.misc.Timer;
import wtf.monsoon.impl.event.EventPacket;
import wtf.monsoon.impl.event.EventPreMotion;
import wtf.monsoon.impl.module.movement.Speed;

public class Disabler
extends Module {
    private final Setting<Mode> mode = new Setting<Mode>("Mode", Mode.WATCHDOG).describedBy("What anticheat to disable");
    private final Setting<Boolean> omniSprintDisabler = new Setting<Boolean>("Omni Sprint Disabler", false).describedBy("Whether to attempt to disable Omni Sprint checks on Watchdog.").visibleWhen(() -> this.mode.getValue() == Mode.WATCHDOG || this.mode.getValue() == Mode.EXPERIMENTAL);
    private final ArrayList<Packet> fakeLagPackets = new ArrayList();
    private LinkedBlockingQueue<Packet<?>> packets = new LinkedBlockingQueue();
    private LinkedBlockingQueue<Packet<?>> startPackets = new LinkedBlockingQueue();
    private boolean canBlink;
    private final Timer hypixelTimer = new Timer();
    private final Timer keepAlivePulseTimer = new Timer();
    private final Timer timerCancelDelay = new Timer();
    private final Timer timerCancelTimer = new Timer();
    @EventLink
    public Listener<EventPacket> eventPacketListener = e -> {
        if (this.mc.thePlayer == null || this.mc.theWorld == null) {
            return;
        }
        switch (this.mode.getValue()) {
            case WATCHDOG: {
                Packet<INetHandlerPlayServer> packet;
                if (this.mc.thePlayer.ticksExisted < 10 && !this.canBlink) {
                    this.packets.clear();
                    this.canBlink = true;
                }
                if (e.getDirection() != EventPacket.Direction.SEND) break;
                if (e.getPacket() instanceof C17PacketCustomPayload) {
                    packet = (C17PacketCustomPayload)e.getPacket();
                    String lunar = "Lunar-Client";
                    ((C17PacketCustomPayload)packet).setChannel("REGISTER");
                    ((C17PacketCustomPayload)packet).setData(new PacketBuffer(Unpooled.wrappedBuffer((byte[])lunar.getBytes())));
                }
                if (this.omniSprintDisabler.getValue().booleanValue() && e.getPacket() instanceof C0BPacketEntityAction && (((C0BPacketEntityAction)(packet = (C0BPacketEntityAction)e.getPacket())).getAction() == C0BPacketEntityAction.Action.START_SPRINTING || ((C0BPacketEntityAction)packet).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                    e.setCancelled(true);
                    return;
                }
                if (!this.canBlink && !(e.getPacket() instanceof C00PacketKeepAlive) && !(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                e.setCancelled(true);
                this.packets.add(e.getPacket());
                break;
            }
            case EXPERIMENTAL: {
                Packet<INetHandlerPlayServer> packet;
                if (e.getPacket() instanceof C03PacketPlayer && !this.mc.thePlayer.isPotionActive(Potion.jump)) {
                    packet = (C03PacketPlayer)e.getPacket();
                    if (this.mc.thePlayer.fallDistance < 1.0f) {
                        ((C03PacketPlayer)packet).setOnGround(true);
                    }
                    if (this.mc.thePlayer.ticksExisted % 3 == 0) {
                        PacketUtil.sendPacket(new C0CPacketInput());
                        this.fakeLagPackets.forEach(PacketUtil::sendPacketNoEvent);
                        this.fakeLagPackets.clear();
                    } else if (!this.packets.isEmpty()) {
                        e.setCancelled(true);
                        this.fakeLagPackets.add(e.getPacket());
                    }
                }
                if (e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    e.setCancelled(true);
                    this.packets.add(e.getPacket());
                }
                if (!(e.getPacket() instanceof C0BPacketEntityAction) || ((C0BPacketEntityAction)(packet = (C0BPacketEntityAction)e.getPacket())).getAction() != C0BPacketEntityAction.Action.START_SPRINTING && ((C0BPacketEntityAction)packet).getAction() != C0BPacketEntityAction.Action.STOP_SPRINTING) break;
                e.setCancelled(true);
                break;
            }
            case CUBECRAFT: {
                C0BPacketEntityAction packet;
                if (!(e.getPacket() instanceof C0BPacketEntityAction) || (packet = (C0BPacketEntityAction)e.getPacket()).getAction() != C0BPacketEntityAction.Action.START_SPRINTING) break;
                packet.setAction(C0BPacketEntityAction.Action.STOP_SPRINTING);
                break;
            }
            case TUBNET: {
                if (e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                    C03PacketPlayer.C06PacketPlayerPosLook packet = (C03PacketPlayer.C06PacketPlayerPosLook)e.getPacket();
                    e.setCancelled(true);
                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), packet.isOnGround()));
                }
                if (!(e.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook)) break;
                e.setCancelled(true);
                PacketUtil.sendPacketNoEvent(new C03PacketPlayer(((C03PacketPlayer.C05PacketPlayerLook)e.getPacket()).isOnGround()));
                break;
            }
            case PIT: {
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                this.packets.add(e.getPacket());
                e.setCancelled(true);
                break;
            }
            case GHOSTLY: {
                if (!(e.getPacket() instanceof C00PacketKeepAlive) && !(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                e.setCancelled(true);
                new PacketSleepThread(e.getPacket(), 3500L).start();
                break;
            }
            case VERUS: {
                if (e.getPacket() instanceof C0FPacketConfirmTransaction && this.mc.thePlayer.ticksExisted > 20) {
                    e.setCancelled(true);
                }
                if (!(e.getPacket() instanceof C00PacketKeepAlive) || this.mc.thePlayer.ticksExisted <= 20) break;
                e.setCancelled(true);
                break;
            }
            case VULCANT: {
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                C0FPacketConfirmTransaction c0FPacketConfirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
                if (this.mc.thePlayer.ticksExisted % 2 == 0) {
                    c0FPacketConfirmTransaction.windowId = 3076;
                    c0FPacketConfirmTransaction.uid = (short)3076;
                    break;
                }
                PacketUtil.sendPacketNoEvent(new C0FPacketConfirmTransaction(3076, 3076, new Random().nextBoolean()));
            }
        }
    };
    @EventLink
    public Listener<EventPreMotion> eventPreMotionListener = e -> {
        switch (this.mode.getValue()) {
            case WATCHDOG: {
                if (this.mc.thePlayer.ticksExisted < 20) {
                    this.canBlink = true;
                    return;
                }
                int amount = this.mc.thePlayer.ticksExisted - 500;
                if (this.hypixelTimer.hasTimeElapsed(Math.max(1200 - amount * 5, 700), true)) {
                    if (!this.packets.isEmpty()) {
                        this.packets.forEach((Consumer<Packet<?>>)((Consumer<Packet>)PacketUtil::sendPacketNoEvent));
                        this.packets.clear();
                    }
                    if (this.mc.thePlayer.ticksExisted > 90) {
                        this.canBlink = false;
                    }
                }
                if (!(this.mc.thePlayer.fallDistance < 1.0f) || !Wrapper.getModule(Speed.class).isEnabled()) break;
                e.setOnGround(true);
                break;
            }
            case EXPERIMENTAL: {
                int amount = this.mc.thePlayer.ticksExisted - 300;
                if (!this.hypixelTimer.hasTimeElapsed(Math.min(1000, Math.max(900 - amount * 5, 460)), true) || this.packets.isEmpty()) break;
                this.packets.forEach((Consumer<Packet<?>>)((Consumer<Packet>)PacketUtil::sendPacketNoEvent));
                this.packets.clear();
                PlayerUtil.sendClientMessage("Sent packets");
                break;
            }
            case GHOSTLY: {
                if (this.mc.thePlayer.ticksExisted % 20 != 0) break;
                PacketUtil.sendPacketNoEvent(new C0CPacketInput(-2.1474836E9f, 2.1474836E9f, false, false));
                break;
            }
            case CUBECRAFT: {
                e.setOnGround(true);
                PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ), 0, null, 0.0f, (float)Math.random() / 5.0f, 0.0f));
                break;
            }
        }
    };

    public Disabler() {
        super("Disabler", "Disable parts of anticheats.", Category.EXPLOIT);
        this.setMetadata(() -> StringUtil.formatEnum(this.mode.getValue()));
    }

    @Override
    public void onEnable() {
        super.onEnable();
        this.fakeLagPackets.clear();
        this.hypixelTimer.reset();
        this.keepAlivePulseTimer.reset();
        this.packets.clear();
        this.startPackets.clear();
        this.timerCancelTimer.reset();
        this.timerCancelDelay.reset();
    }

    public Setting<Mode> getMode() {
        return this.mode;
    }

    public Setting<Boolean> getOmniSprintDisabler() {
        return this.omniSprintDisabler;
    }

    public static enum Mode {
        WATCHDOG,
        EXPERIMENTAL,
        PIT,
        GHOSTLY,
        VULCANT,
        VERUS,
        CUBECRAFT,
        TUBNET;

    }
}

