package Realyy.encryption;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

public class EncryptionUtils {

    private static final IvParameterSpec IV_PARAMETER_SPEC = new IvParameterSpec("0000000000000000".getBytes());


    /**
     * åŠ å¯†æˆ?å??å…­è¿›åˆ¶å­—ç¬¦ä¸²
     *
     * <p>
     * ä½¿ç”¨AESåŠ å¯†ï¼Œå¹¶å°†CipheråŠ å¯†å?Žçš„byteæ•°ç»„è½¬æ?¢æˆ?16è¿›åˆ¶å­—ç¬¦ä¸²
     * </p>
     *
     * @author Cr
     * @date 2020-03-22
     */
    public static String encryptIntoHexString(String data, String key) {
        try {
            Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "AES"), IV_PARAMETER_SPEC);
            return bytesConvertHexString(cipher.doFinal(Arrays.copyOf(data.getBytes(StandardCharsets.UTF_8), 16 * ((data.getBytes(StandardCharsets.UTF_8).length / 16) + 1))));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * å°†åŠ å¯†å?Žçš„å??å…­è¿›åˆ¶å­—ç¬¦ä¸²è¿›è¡Œè§£å¯†
     *
     * @author Cr
     * @date 2020-03-22
     **/
    public static String decryptByHexString(String data, String key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {

        Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "AES"), IV_PARAMETER_SPEC);
        return new String(cipher.doFinal(hexStringConvertBytes(data.toLowerCase())), StandardCharsets.UTF_8);
    }


    /**
     * byteæ•°ç»„è½¬æ?¢æˆ?å??å…­è¿›åˆ¶å­—ç¬¦ä¸²
     *
     * <p>
     * å…ˆå¯¹æ¯?ä¸ªbyteæ•°å€¼è¡¥ç ?æˆ?å??è¿›åˆ¶,
     * ç„¶å?Žåœ¨å°†å??è¿›åˆ¶è½¬æ?¢æˆ?å¯¹åº”çš„å??å…­è¿›åˆ¶.
     * å¦‚æžœå?•æ¬¡è½¬æ?¢, å??å…­è¿›åˆ¶å?ªæœ‰ä¸€ä½?æ—¶ï¼Œ å°†åœ¨å‰?é?¢è¿½åŠ 0å?˜æˆ?ä¸¤ä½?.
     * </p>
     *
     * @author Cr
     * @date 2020-03-22
     */
    private static String bytesConvertHexString(byte[] data) {
        StringBuffer result = new StringBuffer();
        String hexString = "";
        for (byte b : data) {
            // è¡¥ç ?æˆ?æ­£å??è¿›åˆ¶å?Žè½¬æ?¢æˆ?16è¿›åˆ¶
            hexString = Integer.toHexString(b & 255);
            result.append(hexString.length() == 1 ? "0" + hexString : hexString);
        }
        return result.toString().toUpperCase();
    }

    /**
     * å??å…­è¿›åˆ¶å­—ç¬¦ä¸²è½¬æ?¢æˆ?byteæ•°ç»„
     *
     * <p>
     * åœ¨åŠ å¯†æ—¶, å??å…­è¿›åˆ¶æ•°å€¼å’Œbyteå­—èŠ‚çš„å¯¹åº”å…³ç³» æ˜¯:  2ä¸ªå??å…­è¿›åˆ¶æ•°å€¼å¯¹åº”  1ä¸ªbyteå­—èŠ‚  (2: 1)
     * æ‰€ä»¥byteæ•°ç»„çš„é•¿åº¦åº”è¯¥æ˜¯å??å…­è¿›åˆ¶å­—ç¬¦ä¸²çš„ä¸€å?Š, å¹¶ä¸”åœ¨è½¬æ?¢æ—¶
     * åº”æ˜¯ä¸¤ä¸ªå??å…­è¿›åˆ¶æ•°å€¼è½¬æ?¢æˆ?ä¸€ä¸ªbyteå­—èŠ‚  (2ä¸ª2ä¸ªå??å…­è¿›åˆ¶æ•°å€¼è¿›è¡Œè½¬æ?¢)
     * è¿™ä¹Ÿæ˜¯ä¸ºä»€ä¹ˆå?¯ä»¥*2çš„åŽŸå› ï¼Œ ä¾‹å¦‚: 0, 2, 4, 6, 8, 10, 12 ä¾?æ¬¡é??åŽ†
     * </p>
     *
     * @author Cr
     * @date 2020-04-22
     */
    private static byte[] hexStringConvertBytes(String data) {
        int length = data.length() / 2;
        byte[] result = new byte[length];
        for (int i = 0; i < length; i++) {
            int first = Integer.parseInt(data.substring(i * 2, i * 2 + 1), 16);
            int second = Integer.parseInt(data.substring(i * 2 + 1, i * 2 + 2), 16);
            result[i] = (byte) (first * 16 + second);
        }
        return result;
    }

}
